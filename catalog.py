###########################
# Опис завдання:
# СПробужмо розробити просту програму для обілку складу у магазині.
# У завданні будемо детальніше розбирати можливості роботи класами, тому всі товари формуємо по принципах ООП (почитай за це додатково).
#
# Технічне завдання:
# На основі вхідних даних про наявність різних товарів у магазині
# Програма буде складатись з 2 файлів: один включатиме опис товарів, а інший - власне процес взаємодії з користувачем.
# 1) Товари.
# 	Кожен товар за своєю суттю є об'єктом. У магазині зустрічаються товари мінімум 5 типів - овочі, фрукти, консерви, солодощі, хліб (за бажанням, можеш додати ще пару інших типів).
# 	Далі кожен товар має власне свою специфікацію - нпариклад, овочі - це яблуко, груша, слива тощо.
# 	Всі вони мають мати тип, ціну, дату придатності та унікальний номер (штрихкод - робиш просто як рандомну стрічку з 8 восьми символів). Всі ніші атрибути можуть відрізнятися.
# 	Також має бути власне метод, чи переверія, чи строк придатності ще не вийшов.
# 	Зверни увагу, що програма має правильно обирати, який об'єкт створити за типом тоівару.
# 2) Взаємодія з користувачем.
# 	У цьому файлі прописуємо тільки параметри взаємодії з користувачем. Він має мати змогу занести якиїсь товар до системи (відповідно ініалізувтаи об'єкт з якимось параметрами).
# 	Користувач має мати змогу додати будь яку клькітсь товарів за один сеанс.
# 	Коли всі товари додані, система, за згодою корситувача, має зргенерувати йому вихідний файл зі списком всіх товарів, де відрбразиться: штрихкод, товар, ціна, та всі його інші характеристики.
# Використати тільки python та вбудовані бібліотеки.
# Вхідні параметри - за потребою клієнта

###########################
# Рішення нижче
###########################

import random
from datetime import datetime

#Список в якому будуть зберігатися продукти
products = []


class Products:
    '''Батьківський клас продуктів'''
    def __init__(self, pname, price):
        self.name = pname
        self.price = price
        self.code = random.randrange(10000000, 99999999)

    def check_expire_data(self) -> bool:
        '''Функція для перевірки чи ще термін придатності дійсний'''
        expire_date = datetime.strptime(self.expdate, "%d/%m/%Y")
        present = datetime.now()
        if expire_date.date() > present.date():
            print("Next product:")
            x = True
        else:
            print("Your product has expired")
            x = False
        return x


#Підкласи продуктів
class Fruits(Products):
    '''Клас фруктів'''
    def __init__(self, name, price):
        self.product_type = "Fruits"
        super().__init__(name, price)


class Vegetables(Products):
    '''Клас овочів'''
    def __init__(self, name, price):
        self.product_type = "Vegetables"
        super().__init__(name, price)


class CannedGoods(Products):
    '''Клас консервованих виробів'''
    def __init__(self, name, price, expdate):
        self.product_type = "Canned goods"
        self.expdate = expdate
        super().__init__(name, price)


class Sweets(Products):
    '''Клас солодощів'''
    def __init__(self, name, price, expdate):
        self.product_type = "Sweets"
        self.expdate = expdate
        super().__init__(name, price)


class BreadGoods(Products):
    '''Клас хлібних виробів'''
    def __init__(self, name, price,):
        self.product_type = "Bread goods"
        super().__init__(name, price)
